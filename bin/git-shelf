#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)

require "thor"
require 'yaml'
require 'awesome_print'
require 'shell'

require 'git_shelf'

class MyCLI < Thor
  desc "get CATEGORY URL", "Get a repository from URL and put it into CATEGORY directory."
  option :shelf, type: :string

  def get(category, url)
    config = load_config

    shelf = File.expand_path(options[:shelf] || config[:shelf])
    repository = GitShelf::Repository.from_url(shelf, url, category, Time.now)
    begin
      repository.shallow_clone
    rescue StandardError => ex
      puts ex
    end

    repository_book = GitShelf::RepositoryBook.load(config)
    repository_book.save(config[:repository_book])
  end

  desc "list [CATEGORY]", "list repository paths each category"
  option :base_path, type: :boolean, default: true

  def list(category = nil)
    config = load_config
    shelf = File.expand_path(options[:shelf] || config[:shelf])

    repository_book = GitShelf::RepositoryBook.load(config)
    repositories = repository_book.repositories

    items = category.nil? ? repositories : repositories.select {|r| r.category == category}
    puts items.map {|r|
      if options[:base_path]
        r.path
      else
        # plus 1 to delete first slash /
        r.path.slice(shelf.length + 1..-1)
      end
    }.join("\n")
  end

  desc "dump", "Dump repositories directory tree as a yaml."
  option :shelf, type: :string

  def dump
    config = load_config
    repository_book = GitShelf::RepositoryBook.load(config)
    repository_book.save(config[:repository_book])
  end

  desc "count CATEGORY", "Count CATEGORY of repositories from cached yml."

  def count(category)
    config = load_config
    repository_book = GitShelf::RepositoryBook.load(config)
    puts repository_book.repositories.count(category).to_table
  end

  private
  def load_config
    config_path = File.expand_path('~/.ruby-git-shelf')
    YAML.load_file(config_path)
  end
end

MyCLI.start(ARGV)
